"""
For a game where there are 5 disks,
write down the Facts and Rules to model the game state where
disk1 and disk2 (the smallest two) are on peg3, and
other disks are on peg1.

        |            |            |
        |            |            |
        |            |            |
        |            |            |
     ---|--- disk3   |            |
    ----|----        |           -|- disk1
   -----|----- disk5 |          --|-- disk2
==========================================
       peg1         peg2         peg3

Example:
fact: (pred obj1 obj2)
rule: ((pred obj1 obj2) (pred obj2 obj3)) -> (pred obj1 obj3)

"""

fact: (inst disk1 Disk)
fact: (inst disk2 Disk)
fact: (inst disk3 Disk)
fact: (inst disk4 Disk)
fact: (inst disk5 Disk)

fact: (inst peg1 Peg)
fact: (inst peg2 Peg)
fact: (inst peg3 Peg)

fact: (inst base1 Base)
fact: (inst base2 Base)
fact: (inst base3 Base)


fact: (on disk1 peg3)
fact: (on disk2 peg3)

fact: (on disk3 peg1)
fact: (on disk4 peg1)
fact: (on disk5 peg1)


fact: (lessThan disk1 disk2)
fact: (lessThan disk2 disk3)
fact: (lessThan disk3 disk4)
fact: (lessThan disk4 disk5)

fact: (top disk1 peg3)
fact: (top disk3 peg1)
fact: (top base2 peg2)

fact: (onTopOf disk1 disk2)
fact: (onTopOf disk2 base3)

fact: (onTopOf disk3 disk4)
fact: (onTopOf disk4 disk5)
fact: (onTopOf disk5 base1)

rule: ((top ?base ?peg) (inst ?base Base)) -> (empty ?peg)
rule: ((lessThan ?disk_a ?disk_b) (lessThan ?disk_b ?disk_c)) -> (lessThan ?disk_a ?disk_c)
rule: ((top ?disk_move ?peg_initial) (top ?disk_target ?peg_target) (inst ?disk_move Disk) (inst ?disk_target Disk) (larger ?disk_target ?disk_move)) -> (movable ?disk_move ?peg_initial ?peg_target)
rule: ((empty ?peg_target) (top ?disk ?peg_initial) (inst ?disk Disk)) -> (movable ?disk ?peg_initial ?peg_target)
